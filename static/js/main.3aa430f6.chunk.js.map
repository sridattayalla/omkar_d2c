{"version":3,"sources":["config.js","App.js","reportWebVitals.js","index.js"],"names":["exports","base_url","fetch","require","Seat","class","className","this","props","booked","style","number","React","Component","Train","state","seatState","selectedSeatCount","method","headers","then","res","json","console","log","local_seats","Array","fill","map","each","forEach","e","setState","catch","err","error","updateBookedSeats","id","onChange","target","value","_","i","onClick","options","body","now_booked","already_booked","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kJAEAA,EAAQC,SAFS,6B,8HCEXC,EAAQC,EAAQ,IACfF,EAAYE,EAAQ,IAApBF,SAEDG,E,4JACJ,WACE,OACI,qBAAKC,MAAM,OAAOC,UAAiC,IAAtBC,KAAKC,MAAMC,OAAe,SAAiC,IAAtBF,KAAKC,MAAMC,OAAe,aAAe,GAAIC,MAAOH,KAAKC,MAAME,MAAjI,SACGH,KAAKC,MAAMG,a,GAJHC,IAAMC,WAUnBC,E,kDACJ,WAAYN,GAAO,IAAD,8BAChB,cAAMA,IACDO,MAAQ,CACXC,UAAW,KACTC,kBAAmB,GAJP,E,qDAQlB,WAAoB,IAAD,OAMff,EAAMD,EALQ,CACViB,OAAQ,MACRC,QAAS,CAAC,eAAgB,sBAIzBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACFC,QAAQC,IAAIF,GACZ,IAAIG,EAAcC,MAAM,IAAIC,KAAK,GACZL,EAAKM,KAAI,SAAAC,GAAI,OAAEA,EAAI,OAC3BC,SAAQ,SAAAC,GACjBN,EAAYM,EAAE,GAAK,KAEvB,EAAKC,SAAS,CACVhB,UAAWS,OAGlBQ,OAAM,SAAAC,GAAG,OAAIX,QAAQY,MAAM,SAAWD,Q,+BAG/C,WACE3B,KAAK6B,sB,oBAGL,WAAS,IAAD,OACR,OACI,sBAAK9B,UAAU,MAAf,UACE,gCACE,mDACA,wBAAQ+B,GAAG,SAASC,SAAU,SAACP,GAAK,EAAKC,SAAS,CAACf,kBAAmBc,EAAEQ,OAAOC,SAA/E,SACKd,MAAM,GAAGC,KAAK,MAAMC,KAAI,SAACa,EAAGC,GAAJ,OAAQ,yBAAQF,MAAOE,EAAE,EAAjB,cAAsBA,EAAE,EAAxB,YAErC,wBAAQC,QAAS,WACb,IAAIC,EAAU,CACV1B,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1B0B,KAAK,aAAD,OAAe,EAAK9B,MAAME,kBAA1B,MAGRf,EAAMD,EAAS,QAAS2C,GACnBxB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAIF,IAAIwB,EAAaxB,EAAKwB,WAClBC,EAAiBzB,EAAKb,OACtBgB,EAAcC,MAAM,IAAIC,KAAK,GACZoB,EAAenB,KAAI,SAAAC,GAAI,OAAEA,EAAI,OACrCC,SAAQ,SAAAC,GACjBN,EAAYM,EAAE,GAAK,KAEvBe,EAAWhB,SAAQ,SAAAC,GACfN,EAAYM,EAAE,GAAK,KAEvB,EAAKC,SAAS,CACVhB,UAAWS,OAGlBQ,OAAM,SAAAC,GAAG,OAAIX,QAAQY,MAAM,SAAWD,OA3B/C,qBA8BF,qBAAK5B,UAAU,eAAf,SAC8B,OAAzBC,KAAKQ,MAAMC,UAAqB,yCAAoBT,KAAKQ,MAAMC,UAAUY,KAAI,SAACG,EAAGW,GAAJ,OAAW,qBAAKpC,UAAU,OAAf,SAAsB,cAAC,EAAD,CAAMK,OAAQ+B,EAAE,EAAGjC,OAAQsB,WAE5I,wBAAQY,QAAS,WAMbzC,EAAMD,EAAS,SALD,CACViB,OAAQ,SACRC,QAAS,CAAC,eAAgB,sBAIzBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAAI,OAAI,WACVC,QAAQC,IAAIF,GACZ,EAAKc,wBAERH,OAAM,SAAAC,GAAG,OAAIX,QAAQY,MAAM,SAAWD,OAZ/C,0B,GA5EQtB,IAAMC,WAuGXmC,MARf,WACE,OACI,8BACE,cAAC,EAAD,OCrGOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3aa430f6.chunk.js","sourcesContent":["const base_url = \"http://35.200.253.45:3000\"\n\nexports.base_url = base_url\n","import './App.css';\nimport React from 'react';\nconst fetch = require('node-fetch');\nconst {base_url} = require('./config')\n\nclass Seat extends React.Component{\n  render(){\n    return(\n        <div class=\"seat\" className={this.props.booked === 1 ? \"booked\" : this.props.booked === 2 ? \"booked_now\" : \"\"} style={this.props.style} >\n          {this.props.number}\n        </div>\n    );\n  }\n}\n\nclass Train extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      seatState: null,\n        selectedSeatCount: 1,\n    };\n  }\n\n  updateBookedSeats(){\n      let options = {\n          method: 'GET',\n          headers: {'Content-Type': 'application/json'},\n      };\n\n      fetch(base_url, options)\n          .then(res => res.json())\n          .then(json => {\n              console.log(json)\n              let local_seats = Array(80).fill(0);\n              const booked_seats = json.map(each=>each['_id']);\n              booked_seats.forEach(e=>{\n                  local_seats[e-1] = 1;\n              })\n              this.setState({\n                  seatState: local_seats\n              })\n          })\n          .catch(err => console.error('error:' + err));\n  }\n\n  componentDidMount() {\n    this.updateBookedSeats();\n  }\n\n    render(){\n    return(\n        <div className=\"App\">\n          <div>\n            <h1>Book your Tickets</h1>\n            <select id=\"select\" onChange={(e)=>{this.setState({selectedSeatCount: e.target.value})}}>\n                {Array(7).fill(null).map((_, i)=><option value={i+1}> {i+1} </option>)}\n            </select>\n            <button onClick={()=>{\n                let options = {\n                    method: 'POST',\n                    headers: {'Content-Type': 'application/json'},\n                    body: `{\"count\": ${this.state.selectedSeatCount}}`\n                };\n\n                fetch(base_url+\"/book\", options)\n                    .then(res => res.json())\n                    .then(json => {\n                        if('msg' in json){\n\n                        }\n                        let now_booked = json.now_booked;\n                        let already_booked = json.booked;\n                        let local_seats = Array(80).fill(0);\n                        const booked_seats = already_booked.map(each=>each['_id']);\n                        booked_seats.forEach(e=>{\n                            local_seats[e-1] = 1;\n                        })\n                        now_booked.forEach(e=>{\n                            local_seats[e-1] = 2;\n                        })\n                        this.setState({\n                            seatState: local_seats\n                        })\n                    })\n                    .catch(err => console.error('error:' + err));\n            }}>Book</button>\n          </div>\n          <div className=\"seats_layout\">\n              {this.state.seatState === null ? <h2>Loading</h2> :  this.state.seatState.map((e, i) =>  <div className=\"seat\"><Seat number={i+1} booked={e}/></div>)}\n          </div>\n            <button onClick={()=>{\n                let options = {\n                    method: 'DELETE',\n                    headers: {'Content-Type': 'application/json'},\n                };\n\n                fetch(base_url+\"/clear\", options)\n                    .then(res => res.json())\n                    .then(json => ()=>{\n                        console.log(json)\n                        this.updateBookedSeats();\n                    })\n                    .catch(err => console.error('error:' + err));\n            }}>Clear</button>\n        </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n      <div>\n        <Train/>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}